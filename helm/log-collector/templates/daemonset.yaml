apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: {{ .Values.service.name }}
  labels:
    app: {{ .Values.service.name }}
    chart: "{{ .Chart.Name | trunc 63 }}"
    chartVersion: "{{ .Chart.Version | trunc 63 }}"
    visualize: "true"
spec:
  selector:
    matchLabels:
      app: {{ .Values.service.name }}
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      name: {{ .Values.service.name }}
      chart: "{{ .Chart.Name | trunc 63 }}"
      chartVersion: "{{ .Chart.Version | trunc 63 }}"
      labels:
        app: {{ .Values.service.name }}
# todo [sb] check if we can use IAM roles instead of the user        
#      annotations:
#        iam.amazonaws.com/role: thanos-s3-access-role
    spec:
      tolerations:
      - operator: "Exists"
      imagePullSecrets:
      - name: nexusregistry
      containers:
      - name: collector
        image: "{{ .Values.image.repository }}:{{ .Chart.Version }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: environment
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: splunk-forwarder
              key: aws.access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: splunk-forwarder
              key: aws.secret_access_key
        - name: BUCKET_NAME
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: splunk.forwarder.s3.bucket
        - name: BUCKET_REGION
          valueFrom:
            configMapKeyRef:
              name: global-config
              key: splunk.forwarder.aws.region

        command: [ "/bin/sh", "-c", "--" ]
        args:
        - |
          # Check if stopTimeConfigmap exists, and if not, create it
          gres=$(kubectl get configmap {{ .Values.service.stopTimeConfigmap }})
          [ -z "$gres" ] && kubectl create configmap {{ .Values.service.stopTimeConfigmap }}

          set -e; # from this point, no command should fail
          set -o pipefail

          # Pick up where the sending of logs left off
          TIME=$(kubectl get configmap {{ .Values.service.stopTimeConfigmap }} -o json | jq -r ".data.\"${NODE_NAME}\"")
          if [ "$TIME" == "null" ]; then
            TIME="now"
          fi
          echo "Processing logs from: ${TIME}"
          baseDns=$(echo "${ENV}" | sed "s/\(.*\)-.*/\1/g")

          journalctl -a -f --since="${TIME}" --output=json | \
          /log-collector -env=$ENV -workers={{ .Values.log_collector.workers }} -buffer={{ .Values.log_collector.buffer }} \
             -batchsize={{ .Values.log_collector.batchSize}} -batchtimer={{ .Values.log_collector.batchTimer }} \
             -bucketName=$BUCKET_NAME -awsRegion=$BUCKET_REGION -dnsAddress=${baseDns}.ft.com
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sh
              - -c
              - --
              - |
                TIME=$(date "+%Y-%m-%d %H:%M:%S.%3N"); \
                echo "Logs will be resumed from: ${TIME}"; \
                kubectl patch configmap {{ .Values.service.stopTimeConfigmap }} -p "{\"data\": {\"$NODE_NAME\": \"${TIME}\"}}"
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
        ## Needed for running journalctl from the host
        - name: lib64
          mountPath: "/lib64"
          readOnly: true
        - name: journalctl
          mountPath: /usr/bin/journalctl
        - name: usr-lib-systemd
          mountPath: "/usr/lib/systemd"
          readOnly: true
        - name: var-log-journal
          mountPath: "/var/log/journal"
          readOnly: true
        - name: machine-id
          mountPath: "/etc/machine-id"
          readOnly: true

      volumes:
      - name: journalctl
        hostPath:
          path: /usr/bin/journalctl
      - name: var-log-journal
        hostPath:
          path: "/var/log/journal"
      - name: machine-id
        hostPath:
          path: "/etc/machine-id"
      - name: lib64
        hostPath:
          path: "/lib64"
      - name: usr-lib-systemd
        hostPath:
          path: "/usr/lib64/systemd"
